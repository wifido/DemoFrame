<?xml  version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/util  http://www.springframework.org/schema/util/spring-util.xsd
       http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">
	
	 <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:system.properties</value>
                <value>classpath:redis.properties</value>
            </list>
        </property>
    </bean>
	<!-- 开启controller注解支持 -->
    <context:component-scan base-package="com.sf.sfpp.web">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Service"/>
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Component"/>
        <context:include-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
    </context:component-scan>

	 <!-- 配置静态资源，直接映射到对应的文件夹，不被DispatcherServlet处理 -->
    <mvc:resources mapping="/assets/css/**" location="/assets/css/" />
	<mvc:resources mapping="/assets/fonts/**" location="/assets/fonts/" />
	<mvc:resources mapping="/assets/bootstrap/**" location="/assets/bootstrap/" />
    <mvc:resources mapping="/assets/img/**" location="/assets/img/" />
	<mvc:resources mapping="/assets/js/**" location="/assets/js/" />
	<mvc:resources mapping="/assets/plugins/**" location="/assets/plugins/" />

	<!-- 会自动注册了validator ConversionService -->
	<mvc:annotation-driven validator="validator">
		<mvc:message-converters register-defaults="true">
			<!-- 对声明@ResponseBody -->
			<ref bean="fastJsonHttpMessageConverter" />
			<!-- <ref bean="jacksonHttpMessageConverter" /> -->

			<!-- StringHttpMessageConverter编码为UTF-8，防止乱码 -->
			<ref bean="stringHttpMessageConverter" />
		</mvc:message-converters>
	</mvc:annotation-driven>
	
	<bean id="stringHttpMessageConverter" class="org.springframework.http.converter.StringHttpMessageConverter">
		<constructor-arg value="UTF-8" />
		<property name="supportedMediaTypes">
			<list>
				<value>text/plain;charset=UTF-8</value>
				<value>text/html;charset=UTF-8</value>
			</list>
		</property>
	</bean>
	<bean id="jacksonHttpMessageConverter" class="com.sf.sfpp.web.plugin.messageconverter.CustomizeJacksonHttpMessageConverter">
		<property name="prettyPrint" value="true" />
	</bean>
	<bean id="fastJsonHttpMessageConverter" class="com.sf.sfpp.web.plugin.messageconverter.CustomizeFastJsonHttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>application/json;charset=UTF-8</value>
			</list>
		</property>
		<property name="features">
			<array>
				<value>QuoteFieldNames</value>
				<value>UseISO8601DateFormat</value>
				<value>WriteMapNullValue</value>
				<value>WriteNullStringAsEmpty</value>
				<value>WriteNullListAsEmpty</value>
				<value>WriteNullNumberAsZero</value>
				<value>BrowserCompatible</value>
				<value>PrettyFormat</value>
			</array>
		</property>
	</bean>


	<!-- 用于解析,可不用-->
	<!-- 以下 validator  ConversionService 在使用 mvc:annotation-driven 会 自动注册-->
    <bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
        <property name="providerClass" value="org.hibernate.validator.HibernateValidator"/>
        <!-- 如果不加mesageSource的配置   默认使用classpath下的 ValidationMessages.properties -->
        <property name="validationMessageSource" ref="messageSource"/>
    </bean>

    <!-- 国际化的消息资源文件 -->
    <bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
        <property name="basenames">
            <list>
                <!-- 在web环境中一定要定位到classpath 否则默认到当前web应用下找  -->
				<value>classpath:messages/ValidationMessage</value>
				<value>classpath:messages/ExceptionMessages</value>
			</list>
        </property>
        <property name="useCodeAsDefaultMessage" value="false"/>
        <property name="defaultEncoding" value="UTF-8"/>
        <property name="cacheSeconds" value="60"/>
    </bean>
	
   <!--重定向路径 -->
   <mvc:view-controller path="/" view-name="redirect:/index" />

	<!-- 当在web.xml 中 DispatcherServlet使用 <url-pattern>/</url-pattern> 映射时，能映射静态资源 -->
	<mvc:default-servlet-handler />

    <!-- 默认的视图解析器 ， 配置支持JSP视图解析器-->
    <bean id="defaultJspViewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
        <property name="contentType" value="text/html;charset=UTF-8"/>
        <property name="prefix" value="/pages"/>
        <property name="suffix" value=".jsp"/>
    </bean>

	<!-- 文件上传相关 解析器 -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
	</bean>

	<!-- 控制器异常处理 -->
	<bean id="exceptionHandlerExceptionResolver" class="org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver" />

	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>
	<!-- 启用SHIRO注解 -->
	<!--<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor">
	    <property name="proxyTargetClass" value="true" />
	</bean>-->
	
	<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
	    <property name="securityManager" ref="securityManager"/>
	</bean>

	<!--shiro配置 -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager" />
		<property name="loginUrl" value="/login" /> 		<!--需要登录的请求在未登录的情况下会被拦截到这个地址 -->
		<property name="successUrl" value="/index" />
		<property name="unauthorizedUrl" value="/unauthorized" />
		<property name="filters">
			<util:map>
				<entry key="logout" value-ref="logoutFilter"/>
				<entry key="authc" value-ref="formAuthenticationFilter"/>
			</util:map>

		</property>
		<property name="filterChainDefinitions">
			<value>
				/assets/** = anon
				/*.ico = anon
				/login = authc
				/logout = logout
				/pages/system/resource.jsp* = perms[/system/resource]
				/pages/system/userManage.jsp*= perms[/system/userManage]
				/pages/system/roleManage.jsp* = perms[/system/roleManage]
<!-- 				/index/agent/* = perms[/agent/list] -->
<!-- 				/index/diagram/* = perms[/diagram/list] -->
<!-- 				/index/user/* = perms[/user/list] -->
				/** = authc
			</value>
		</property>
	</bean>


	<!--替换默认的form 验证过滤器-->
	<bean id="formAuthenticationFilter" class="com.sf.sfpp.web.user.shiro.filter.CustomFormAuthenticationFilter">
		<property name="successUrl" value="/index"/>
		<property name="loginUrl" value="/login"/>
		<!--表单上的用户名/密码 下次自动登录的参数名-->
		<property name="usernameParam" value="username"/>
		<property name="passwordParam" value="password"/>
		<!--<property name="rememberMeParam" value="rememberMe"/>-->
	</bean>

	<!-- 退出登录过滤器 -->
	<bean id="logoutFilter" class="com.sf.sfpp.web.user.shiro.filter.CoustomLogoutFilter">
		<!--重定向 -->
		<property name="redirectUrl" value="/login" />
	</bean>
	
	<!--配置权限核心管理器 -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="userRealm" />
		<property name="cacheManager" ref="cacheManager" />
		<property name="sessionManager" ref="sessionManager"></property>
	</bean>
	 
	<!-- sessionManager -->
	<bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
	    <property name="sessionDAO" ref="redisSessionDAO" />
	</bean>
	
	<!-- redisSessionDAO -->
	<bean id="redisSessionDAO" class="com.sf.sfpp.web.user.shiro.RedisSessionDAO">
	    <property name="redisManager" ref="redisManager" />
	</bean>
	 
	<!-- cacheManager -->
	<bean id="cacheManager" class="com.sf.sfpp.web.user.shiro.RedisCacheManager">
	    <property name="redisManager" ref="redisManager" />
	</bean>
	
	<!-- shiro redisManager -->
	<bean id="redisManager" class="com.sf.sfpp.web.user.shiro.RedisManager">
		<property name="expire" value="1800"/>
	    <property name="password" value="${jedis.conn.auth}"/>
        <property name="sentinelConfig" ref="redisSentinelConfiguration"/>
	</bean>
	
	<bean id="ldapAuthentication" class="com.sf.sfpp.web.user.shiro.LdapAuthentication">
		<property name="url" value="${sf.ldap.url}"></property>
		<property name="domain" value="${sf.ldap.domain}"></property>
	</bean>
	
</beans>
